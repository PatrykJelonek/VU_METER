
ws2812b_v3_withADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001620  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800172c  0800172c  0001172c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001768  08001768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800176c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  2000000c  08001778  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b4  08001778  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000de16  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020ea  00000000  00000000  0002de4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031b3  00000000  00000000  0002ff35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005f0  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a8  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c2c  00000000  00000000  00033e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002405  00000000  00000000  00037aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039eb1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000fd8  00000000  00000000  00039f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001714 	.word	0x08001714

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001714 	.word	0x08001714

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fae2 	bl	800072c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 faa4 	bl	80006c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa7d 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f9b0 	bl	8001510 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80001dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001de:	2600      	movs	r6, #0
{
 80001e0:	4604      	mov	r4, r0
 80001e2:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001e4:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80001e6:	f7ff fff3 	bl	80001d0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80001ec:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	05d2      	lsls	r2, r2, #23
 80001f2:	d508      	bpl.n	8000206 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80001f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80001f8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000202:	b003      	add	sp, #12
 8000204:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	05d6      	lsls	r6, r2, #23
 800020a:	d403      	bmi.n	8000214 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800020c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800020e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000212:	d03b      	beq.n	800028c <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000214:	4b3a      	ldr	r3, [pc, #232]	; (8000300 <HAL_ADC_PollForConversion+0x124>)
 8000216:	2002      	movs	r0, #2
 8000218:	681e      	ldr	r6, [r3, #0]
 800021a:	f000 fe85 	bl	8000f28 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800021e:	6823      	ldr	r3, [r4, #0]
 8000220:	4a38      	ldr	r2, [pc, #224]	; (8000304 <HAL_ADC_PollForConversion+0x128>)
 8000222:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000224:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000228:	4211      	tst	r1, r2
 800022a:	4a37      	ldr	r2, [pc, #220]	; (8000308 <HAL_ADC_PollForConversion+0x12c>)
 800022c:	d14f      	bne.n	80002ce <HAL_ADC_PollForConversion+0xf2>
 800022e:	68de      	ldr	r6, [r3, #12]
 8000230:	4936      	ldr	r1, [pc, #216]	; (800030c <HAL_ADC_PollForConversion+0x130>)
 8000232:	420e      	tst	r6, r1
 8000234:	d14b      	bne.n	80002ce <HAL_ADC_PollForConversion+0xf2>
 8000236:	6919      	ldr	r1, [r3, #16]
 8000238:	4211      	tst	r1, r2
 800023a:	d159      	bne.n	80002f0 <HAL_ADC_PollForConversion+0x114>
 800023c:	68da      	ldr	r2, [r3, #12]
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <HAL_ADC_PollForConversion+0x134>)
 8000240:	421a      	tst	r2, r3
 8000242:	bf14      	ite	ne
 8000244:	2329      	movne	r3, #41	; 0x29
 8000246:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000248:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	429e      	cmp	r6, r3
 8000250:	d920      	bls.n	8000294 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000252:	1c6b      	adds	r3, r5, #1
 8000254:	d005      	beq.n	8000262 <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000256:	b15d      	cbz	r5, 8000270 <HAL_ADC_PollForConversion+0x94>
 8000258:	f7ff ffba 	bl	80001d0 <HAL_GetTick>
 800025c:	1bc0      	subs	r0, r0, r7
 800025e:	4285      	cmp	r5, r0
 8000260:	d306      	bcc.n	8000270 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000262:	9b01      	ldr	r3, [sp, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	e7f0      	b.n	800024c <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800026a:	1c68      	adds	r0, r5, #1
 800026c:	d00f      	beq.n	800028e <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800026e:	b945      	cbnz	r5, 8000282 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000272:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800027a:	2300      	movs	r3, #0
 800027c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000280:	e7bf      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000282:	f7ff ffa5 	bl	80001d0 <HAL_GetTick>
 8000286:	1bc0      	subs	r0, r0, r7
 8000288:	4285      	cmp	r5, r0
 800028a:	d3f1      	bcc.n	8000270 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800028c:	6822      	ldr	r2, [r4, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	0799      	lsls	r1, r3, #30
 8000292:	d5ea      	bpl.n	800026a <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000294:	f06f 0312 	mvn.w	r3, #18
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800029c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800029e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002a4:	6893      	ldr	r3, [r2, #8]
 80002a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80002aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80002ae:	d125      	bne.n	80002fc <HAL_ADC_PollForConversion+0x120>
 80002b0:	68e3      	ldr	r3, [r4, #12]
 80002b2:	bb1b      	cbnz	r3, 80002fc <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ba:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80002be:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80002c2:	d11b      	bne.n	80002fc <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80002cc:	e799      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002ce:	6919      	ldr	r1, [r3, #16]
 80002d0:	4211      	tst	r1, r2
 80002d2:	d103      	bne.n	80002dc <HAL_ADC_PollForConversion+0x100>
 80002d4:	68d9      	ldr	r1, [r3, #12]
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <HAL_ADC_PollForConversion+0x134>)
 80002d8:	4211      	tst	r1, r2
 80002da:	d00b      	beq.n	80002f4 <HAL_ADC_PollForConversion+0x118>
 80002dc:	6919      	ldr	r1, [r3, #16]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <HAL_ADC_PollForConversion+0x138>)
 80002e0:	4211      	tst	r1, r2
 80002e2:	d109      	bne.n	80002f8 <HAL_ADC_PollForConversion+0x11c>
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4213      	tst	r3, r2
 80002e8:	bf14      	ite	ne
 80002ea:	23fc      	movne	r3, #252	; 0xfc
 80002ec:	2354      	moveq	r3, #84	; 0x54
 80002ee:	e7ab      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f0:	2329      	movs	r3, #41	; 0x29
 80002f2:	e7a9      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f4:	2354      	movs	r3, #84	; 0x54
 80002f6:	e7a7      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f8:	23fc      	movs	r3, #252	; 0xfc
 80002fa:	e7a5      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80002fc:	2000      	movs	r0, #0
 80002fe:	e780      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
 8000300:	20000008 	.word	0x20000008
 8000304:	24924924 	.word	0x24924924
 8000308:	12492492 	.word	0x12492492
 800030c:	00924924 	.word	0x00924924
 8000310:	00492492 	.word	0x00492492
 8000314:	00249249 	.word	0x00249249

08000318 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000318:	6803      	ldr	r3, [r0, #0]
 800031a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800031c:	4770      	bx	lr
	...

08000320 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000320:	2300      	movs	r3, #0
{ 
 8000322:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000324:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000326:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800032a:	2b01      	cmp	r3, #1
 800032c:	d074      	beq.n	8000418 <HAL_ADC_ConfigChannel+0xf8>
 800032e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000330:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000332:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000336:	2d06      	cmp	r5, #6
 8000338:	6802      	ldr	r2, [r0, #0]
 800033a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800033e:	680c      	ldr	r4, [r1, #0]
 8000340:	d825      	bhi.n	800038e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000342:	442b      	add	r3, r5
 8000344:	251f      	movs	r5, #31
 8000346:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000348:	3b05      	subs	r3, #5
 800034a:	409d      	lsls	r5, r3
 800034c:	ea26 0505 	bic.w	r5, r6, r5
 8000350:	fa04 f303 	lsl.w	r3, r4, r3
 8000354:	432b      	orrs	r3, r5
 8000356:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000358:	2c09      	cmp	r4, #9
 800035a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800035e:	688d      	ldr	r5, [r1, #8]
 8000360:	d92f      	bls.n	80003c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000362:	2607      	movs	r6, #7
 8000364:	4423      	add	r3, r4
 8000366:	68d1      	ldr	r1, [r2, #12]
 8000368:	3b1e      	subs	r3, #30
 800036a:	409e      	lsls	r6, r3
 800036c:	ea21 0106 	bic.w	r1, r1, r6
 8000370:	fa05 f303 	lsl.w	r3, r5, r3
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000378:	f1a4 0310 	sub.w	r3, r4, #16
 800037c:	2b01      	cmp	r3, #1
 800037e:	d92b      	bls.n	80003d8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000380:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000382:	2200      	movs	r2, #0
 8000384:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000388:	4618      	mov	r0, r3
 800038a:	b002      	add	sp, #8
 800038c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800038e:	2d0c      	cmp	r5, #12
 8000390:	d80b      	bhi.n	80003aa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000392:	442b      	add	r3, r5
 8000394:	251f      	movs	r5, #31
 8000396:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000398:	3b23      	subs	r3, #35	; 0x23
 800039a:	409d      	lsls	r5, r3
 800039c:	ea26 0505 	bic.w	r5, r6, r5
 80003a0:	fa04 f303 	lsl.w	r3, r4, r3
 80003a4:	432b      	orrs	r3, r5
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
 80003a8:	e7d6      	b.n	8000358 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003aa:	442b      	add	r3, r5
 80003ac:	251f      	movs	r5, #31
 80003ae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003b0:	3b41      	subs	r3, #65	; 0x41
 80003b2:	409d      	lsls	r5, r3
 80003b4:	ea26 0505 	bic.w	r5, r6, r5
 80003b8:	fa04 f303 	lsl.w	r3, r4, r3
 80003bc:	432b      	orrs	r3, r5
 80003be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003c0:	e7ca      	b.n	8000358 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003c2:	2607      	movs	r6, #7
 80003c4:	6911      	ldr	r1, [r2, #16]
 80003c6:	4423      	add	r3, r4
 80003c8:	409e      	lsls	r6, r3
 80003ca:	ea21 0106 	bic.w	r1, r1, r6
 80003ce:	fa05 f303 	lsl.w	r3, r5, r3
 80003d2:	430b      	orrs	r3, r1
 80003d4:	6113      	str	r3, [r2, #16]
 80003d6:	e7cf      	b.n	8000378 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_ConfigChannel+0xfc>)
 80003da:	429a      	cmp	r2, r3
 80003dc:	d116      	bne.n	800040c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003de:	6893      	ldr	r3, [r2, #8]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	d4cd      	bmi.n	8000380 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003e4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003e6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ec:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003ee:	d1c7      	bne.n	8000380 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <HAL_ADC_ConfigChannel+0x100>)
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <HAL_ADC_ConfigChannel+0x104>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80003fa:	230a      	movs	r3, #10
 80003fc:	4353      	muls	r3, r2
            wait_loop_index--;
 80003fe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000400:	9b01      	ldr	r3, [sp, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0bc      	beq.n	8000380 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000406:	9b01      	ldr	r3, [sp, #4]
 8000408:	3b01      	subs	r3, #1
 800040a:	e7f8      	b.n	80003fe <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000414:	2301      	movs	r3, #1
 8000416:	e7b4      	b.n	8000382 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000418:	2302      	movs	r3, #2
 800041a:	e7b5      	b.n	8000388 <HAL_ADC_ConfigChannel+0x68>
 800041c:	40012400 	.word	0x40012400
 8000420:	20000008 	.word	0x20000008
 8000424:	000f4240 	.word	0x000f4240

08000428 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000428:	2300      	movs	r3, #0
{
 800042a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800042c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800042e:	6803      	ldr	r3, [r0, #0]
{
 8000430:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000432:	689a      	ldr	r2, [r3, #8]
 8000434:	07d2      	lsls	r2, r2, #31
 8000436:	d502      	bpl.n	800043e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000438:	2000      	movs	r0, #0
}
 800043a:	b002      	add	sp, #8
 800043c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800043e:	689a      	ldr	r2, [r3, #8]
 8000440:	f042 0201 	orr.w	r2, r2, #1
 8000444:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <ADC_Enable+0x68>)
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <ADC_Enable+0x6c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000450:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000452:	9b01      	ldr	r3, [sp, #4]
 8000454:	b9c3      	cbnz	r3, 8000488 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000456:	f7ff febb 	bl	80001d0 <HAL_GetTick>
 800045a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800045c:	6823      	ldr	r3, [r4, #0]
 800045e:	689d      	ldr	r5, [r3, #8]
 8000460:	f015 0501 	ands.w	r5, r5, #1
 8000464:	d1e8      	bne.n	8000438 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000466:	f7ff feb3 	bl	80001d0 <HAL_GetTick>
 800046a:	1b80      	subs	r0, r0, r6
 800046c:	2802      	cmp	r0, #2
 800046e:	d9f5      	bls.n	800045c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000472:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800047c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800047e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000486:	e7d8      	b.n	800043a <ADC_Enable+0x12>
      wait_loop_index--;
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	3b01      	subs	r3, #1
 800048c:	e7e0      	b.n	8000450 <ADC_Enable+0x28>
 800048e:	bf00      	nop
 8000490:	20000008 	.word	0x20000008
 8000494:	000f4240 	.word	0x000f4240

08000498 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000498:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800049c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800049e:	2b01      	cmp	r3, #1
{
 80004a0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004a2:	d054      	beq.n	800054e <HAL_ADC_Start+0xb6>
 80004a4:	2301      	movs	r3, #1
 80004a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004aa:	f7ff ffbd 	bl	8000428 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d149      	bne.n	8000546 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80004b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80004b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d104      	bne.n	80004d4 <HAL_ADC_Start+0x3c>
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <HAL_ADC_Start+0xc0>)
 80004cc:	684a      	ldr	r2, [r1, #4]
 80004ce:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80004d2:	d12e      	bne.n	8000532 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80004da:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004dc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004de:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e0:	bf41      	itttt	mi
 80004e2:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80004e4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80004e8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80004ec:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004f4:	bf1c      	itt	ne
 80004f6:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80004f8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80004fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80004fe:	2200      	movs	r2, #0
 8000500:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000504:	f06f 0202 	mvn.w	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000510:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000514:	d113      	bne.n	800053e <HAL_ADC_Start+0xa6>
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <HAL_ADC_Start+0xbc>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d105      	bne.n	8000528 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000520:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000522:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000526:	d10a      	bne.n	800053e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000532:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000534:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000538:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800053a:	684a      	ldr	r2, [r1, #4]
 800053c:	e7cf      	b.n	80004de <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000544:	e7f3      	b.n	800052e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000546:	2300      	movs	r3, #0
 8000548:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800054c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800054e:	2002      	movs	r0, #2
}
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	40012800 	.word	0x40012800
 8000558:	40012400 	.word	0x40012400

0800055c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800055e:	6803      	ldr	r3, [r0, #0]
{
 8000560:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	07d2      	lsls	r2, r2, #31
 8000566:	d401      	bmi.n	800056c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000568:	2000      	movs	r0, #0
 800056a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	f022 0201 	bic.w	r2, r2, #1
 8000572:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000574:	f7ff fe2c 	bl	80001d0 <HAL_GetTick>
 8000578:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	07db      	lsls	r3, r3, #31
 8000580:	d5f2      	bpl.n	8000568 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000582:	f7ff fe25 	bl	80001d0 <HAL_GetTick>
 8000586:	1b40      	subs	r0, r0, r5
 8000588:	2802      	cmp	r0, #2
 800058a:	d9f6      	bls.n	800057a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800058e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800059e:	bd38      	pop	{r3, r4, r5, pc}

080005a0 <HAL_ADC_Init>:
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d071      	beq.n	800068c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005aa:	b923      	cbnz	r3, 80005b6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80005ac:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80005ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80005b2:	f000 ffcf 	bl	8001554 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005b6:	4620      	mov	r0, r4
 80005b8:	f7ff ffd0 	bl	800055c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005be:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c4:	d164      	bne.n	8000690 <HAL_ADC_Init+0xf0>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d162      	bne.n	8000690 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005ca:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80005cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005d0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80005d2:	f023 0302 	bic.w	r3, r3, #2
 80005d6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005da:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005dc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80005de:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80005e0:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80005e6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005ea:	d038      	beq.n	800065e <HAL_ADC_Init+0xbe>
 80005ec:	2901      	cmp	r1, #1
 80005ee:	bf14      	ite	ne
 80005f0:	4606      	movne	r6, r0
 80005f2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005f6:	6965      	ldr	r5, [r4, #20]
 80005f8:	2d01      	cmp	r5, #1
 80005fa:	d107      	bne.n	800060c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d130      	bne.n	8000662 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000600:	69a3      	ldr	r3, [r4, #24]
 8000602:	3b01      	subs	r3, #1
 8000604:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000608:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800060c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800060e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000612:	685d      	ldr	r5, [r3, #4]
 8000614:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000618:	ea45 0506 	orr.w	r5, r5, r6
 800061c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800061e:	689e      	ldr	r6, [r3, #8]
 8000620:	4d1d      	ldr	r5, [pc, #116]	; (8000698 <HAL_ADC_Init+0xf8>)
 8000622:	ea05 0506 	and.w	r5, r5, r6
 8000626:	ea45 0502 	orr.w	r5, r5, r2
 800062a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800062c:	d001      	beq.n	8000632 <HAL_ADC_Init+0x92>
 800062e:	2901      	cmp	r1, #1
 8000630:	d120      	bne.n	8000674 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000632:	6921      	ldr	r1, [r4, #16]
 8000634:	3901      	subs	r1, #1
 8000636:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000638:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800063a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800063e:	4329      	orrs	r1, r5
 8000640:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000642:	6899      	ldr	r1, [r3, #8]
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_ADC_Init+0xfc>)
 8000646:	400b      	ands	r3, r1
 8000648:	429a      	cmp	r2, r3
 800064a:	d115      	bne.n	8000678 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 800064c:	2300      	movs	r3, #0
 800064e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	62a3      	str	r3, [r4, #40]	; 0x28
 800065c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800065e:	460e      	mov	r6, r1
 8000660:	e7c9      	b.n	80005f6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800066a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000672:	e7cb      	b.n	800060c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000674:	2100      	movs	r1, #0
 8000676:	e7df      	b.n	8000638 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800067a:	f023 0312 	bic.w	r3, r3, #18
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
}
 800068e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	62a3      	str	r3, [r4, #40]	; 0x28
 8000696:	e7f9      	b.n	800068c <HAL_ADC_Init+0xec>
 8000698:	ffe1f7fd 	.word	0xffe1f7fd
 800069c:	ff1f0efe 	.word	0xff1f0efe

080006a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006a2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ae:	041b      	lsls	r3, r3, #16
 80006b0:	0c1b      	lsrs	r3, r3, #16
 80006b2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006bc:	60d3      	str	r3, [r2, #12]
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c6:	b530      	push	{r4, r5, lr}
 80006c8:	68dc      	ldr	r4, [r3, #12]
 80006ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	bf28      	it	cs
 80006d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e0:	bf98      	it	ls
 80006e2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	fa05 f303 	lsl.w	r3, r5, r3
 80006e8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ec:	bf88      	it	hi
 80006ee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4019      	ands	r1, r3
 80006f2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	fa05 f404 	lsl.w	r4, r5, r4
 80006f8:	3c01      	subs	r4, #1
 80006fa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fe:	ea42 0201 	orr.w	r2, r2, r1
 8000702:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	bfaf      	iteee	ge
 8000708:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	4b06      	ldrlt	r3, [pc, #24]	; (8000728 <HAL_NVIC_SetPriority+0x64>)
 800070e:	f000 000f 	andlt.w	r0, r0, #15
 8000712:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	bfa5      	ittet	ge
 8000716:	b2d2      	uxtbge	r2, r2
 8000718:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	3801      	subs	r0, #1
 800072e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000732:	d20a      	bcs.n	800074a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800075c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800075e:	4616      	mov	r6, r2
 8000760:	4b65      	ldr	r3, [pc, #404]	; (80008f8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000762:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000908 <HAL_GPIO_Init+0x1b0>
 8000766:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800090c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800076a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000770:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000774:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000778:	45a0      	cmp	r8, r4
 800077a:	d17f      	bne.n	800087c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800077c:	684d      	ldr	r5, [r1, #4]
 800077e:	2d12      	cmp	r5, #18
 8000780:	f000 80af 	beq.w	80008e2 <HAL_GPIO_Init+0x18a>
 8000784:	f200 8088 	bhi.w	8000898 <HAL_GPIO_Init+0x140>
 8000788:	2d02      	cmp	r5, #2
 800078a:	f000 80a7 	beq.w	80008dc <HAL_GPIO_Init+0x184>
 800078e:	d87c      	bhi.n	800088a <HAL_GPIO_Init+0x132>
 8000790:	2d00      	cmp	r5, #0
 8000792:	f000 808e 	beq.w	80008b2 <HAL_GPIO_Init+0x15a>
 8000796:	2d01      	cmp	r5, #1
 8000798:	f000 809e 	beq.w	80008d8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800079c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007a0:	2cff      	cmp	r4, #255	; 0xff
 80007a2:	bf93      	iteet	ls
 80007a4:	4682      	movls	sl, r0
 80007a6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80007aa:	3d08      	subhi	r5, #8
 80007ac:	f8d0 b000 	ldrls.w	fp, [r0]
 80007b0:	bf92      	itee	ls
 80007b2:	00b5      	lslls	r5, r6, #2
 80007b4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80007b8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007ba:	fa09 f805 	lsl.w	r8, r9, r5
 80007be:	ea2b 0808 	bic.w	r8, fp, r8
 80007c2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007c6:	bf88      	it	hi
 80007c8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007cc:	ea48 0505 	orr.w	r5, r8, r5
 80007d0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007d4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80007d8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80007dc:	d04e      	beq.n	800087c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4d47      	ldr	r5, [pc, #284]	; (80008fc <HAL_GPIO_Init+0x1a4>)
 80007e0:	4f46      	ldr	r7, [pc, #280]	; (80008fc <HAL_GPIO_Init+0x1a4>)
 80007e2:	69ad      	ldr	r5, [r5, #24]
 80007e4:	f026 0803 	bic.w	r8, r6, #3
 80007e8:	f045 0501 	orr.w	r5, r5, #1
 80007ec:	61bd      	str	r5, [r7, #24]
 80007ee:	69bd      	ldr	r5, [r7, #24]
 80007f0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80007f4:	f005 0501 	and.w	r5, r5, #1
 80007f8:	9501      	str	r5, [sp, #4]
 80007fa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007fe:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000802:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000804:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000808:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800080c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000810:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000814:	4d3a      	ldr	r5, [pc, #232]	; (8000900 <HAL_GPIO_Init+0x1a8>)
 8000816:	42a8      	cmp	r0, r5
 8000818:	d068      	beq.n	80008ec <HAL_GPIO_Init+0x194>
 800081a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800081e:	42a8      	cmp	r0, r5
 8000820:	d066      	beq.n	80008f0 <HAL_GPIO_Init+0x198>
 8000822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000826:	42a8      	cmp	r0, r5
 8000828:	d064      	beq.n	80008f4 <HAL_GPIO_Init+0x19c>
 800082a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082e:	42a8      	cmp	r0, r5
 8000830:	bf0c      	ite	eq
 8000832:	2503      	moveq	r5, #3
 8000834:	2504      	movne	r5, #4
 8000836:	fa05 f50b 	lsl.w	r5, r5, fp
 800083a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800083e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000842:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000844:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000848:	bf14      	ite	ne
 800084a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800084c:	43a5      	biceq	r5, r4
 800084e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000850:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000852:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000856:	bf14      	ite	ne
 8000858:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800085a:	43a5      	biceq	r5, r4
 800085c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800085e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000860:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000864:	bf14      	ite	ne
 8000866:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000868:	43a5      	biceq	r5, r4
 800086a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800086c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800086e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000872:	bf14      	ite	ne
 8000874:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000876:	ea25 0404 	biceq.w	r4, r5, r4
 800087a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800087c:	3601      	adds	r6, #1
 800087e:	2e10      	cmp	r6, #16
 8000880:	f47f af73 	bne.w	800076a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000884:	b003      	add	sp, #12
 8000886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800088a:	2d03      	cmp	r5, #3
 800088c:	d022      	beq.n	80008d4 <HAL_GPIO_Init+0x17c>
 800088e:	2d11      	cmp	r5, #17
 8000890:	d184      	bne.n	800079c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000892:	68ca      	ldr	r2, [r1, #12]
 8000894:	3204      	adds	r2, #4
          break;
 8000896:	e781      	b.n	800079c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000898:	4f1a      	ldr	r7, [pc, #104]	; (8000904 <HAL_GPIO_Init+0x1ac>)
 800089a:	42bd      	cmp	r5, r7
 800089c:	d009      	beq.n	80008b2 <HAL_GPIO_Init+0x15a>
 800089e:	d812      	bhi.n	80008c6 <HAL_GPIO_Init+0x16e>
 80008a0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000910 <HAL_GPIO_Init+0x1b8>
 80008a4:	454d      	cmp	r5, r9
 80008a6:	d004      	beq.n	80008b2 <HAL_GPIO_Init+0x15a>
 80008a8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80008ac:	454d      	cmp	r5, r9
 80008ae:	f47f af75 	bne.w	800079c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b2:	688a      	ldr	r2, [r1, #8]
 80008b4:	b1c2      	cbz	r2, 80008e8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008b6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80008b8:	bf0c      	ite	eq
 80008ba:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80008be:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c2:	2208      	movs	r2, #8
 80008c4:	e76a      	b.n	800079c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80008c6:	4575      	cmp	r5, lr
 80008c8:	d0f3      	beq.n	80008b2 <HAL_GPIO_Init+0x15a>
 80008ca:	4565      	cmp	r5, ip
 80008cc:	d0f1      	beq.n	80008b2 <HAL_GPIO_Init+0x15a>
 80008ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000914 <HAL_GPIO_Init+0x1bc>
 80008d2:	e7eb      	b.n	80008ac <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008d4:	2200      	movs	r2, #0
 80008d6:	e761      	b.n	800079c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	68ca      	ldr	r2, [r1, #12]
          break;
 80008da:	e75f      	b.n	800079c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008dc:	68ca      	ldr	r2, [r1, #12]
 80008de:	3208      	adds	r2, #8
          break;
 80008e0:	e75c      	b.n	800079c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e2:	68ca      	ldr	r2, [r1, #12]
 80008e4:	320c      	adds	r2, #12
          break;
 80008e6:	e759      	b.n	800079c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008e8:	2204      	movs	r2, #4
 80008ea:	e757      	b.n	800079c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ec:	2500      	movs	r5, #0
 80008ee:	e7a2      	b.n	8000836 <HAL_GPIO_Init+0xde>
 80008f0:	2501      	movs	r5, #1
 80008f2:	e7a0      	b.n	8000836 <HAL_GPIO_Init+0xde>
 80008f4:	2502      	movs	r5, #2
 80008f6:	e79e      	b.n	8000836 <HAL_GPIO_Init+0xde>
 80008f8:	40010400 	.word	0x40010400
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800
 8000904:	10210000 	.word	0x10210000
 8000908:	10310000 	.word	0x10310000
 800090c:	10320000 	.word	0x10320000
 8000910:	10110000 	.word	0x10110000
 8000914:	10220000 	.word	0x10220000

08000918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000918:	b10a      	cbz	r2, 800091e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800091a:	6101      	str	r1, [r0, #16]
 800091c:	4770      	bx	lr
 800091e:	0409      	lsls	r1, r1, #16
 8000920:	e7fb      	b.n	800091a <HAL_GPIO_WritePin+0x2>
	...

08000924 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000924:	6803      	ldr	r3, [r0, #0]
{
 8000926:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092a:	07db      	lsls	r3, r3, #31
{
 800092c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092e:	d410      	bmi.n	8000952 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	079f      	lsls	r7, r3, #30
 8000934:	d45e      	bmi.n	80009f4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000936:	682b      	ldr	r3, [r5, #0]
 8000938:	0719      	lsls	r1, r3, #28
 800093a:	f100 8095 	bmi.w	8000a68 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	075a      	lsls	r2, r3, #29
 8000942:	f100 80bf 	bmi.w	8000ac4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000946:	69ea      	ldr	r2, [r5, #28]
 8000948:	2a00      	cmp	r2, #0
 800094a:	f040 812d 	bne.w	8000ba8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800094e:	2000      	movs	r0, #0
 8000950:	e014      	b.n	800097c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000952:	4c90      	ldr	r4, [pc, #576]	; (8000b94 <HAL_RCC_OscConfig+0x270>)
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	2b04      	cmp	r3, #4
 800095c:	d007      	beq.n	800096e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b08      	cmp	r3, #8
 8000966:	d10c      	bne.n	8000982 <HAL_RCC_OscConfig+0x5e>
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	03de      	lsls	r6, r3, #15
 800096c:	d509      	bpl.n	8000982 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	039c      	lsls	r4, r3, #14
 8000972:	d5dd      	bpl.n	8000930 <HAL_RCC_OscConfig+0xc>
 8000974:	686b      	ldr	r3, [r5, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1da      	bne.n	8000930 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800097a:	2001      	movs	r0, #1
}
 800097c:	b002      	add	sp, #8
 800097e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000982:	686b      	ldr	r3, [r5, #4]
 8000984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000988:	d110      	bne.n	80009ac <HAL_RCC_OscConfig+0x88>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000990:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000992:	f7ff fc1d 	bl	80001d0 <HAL_GetTick>
 8000996:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	0398      	lsls	r0, r3, #14
 800099c:	d4c8      	bmi.n	8000930 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099e:	f7ff fc17 	bl	80001d0 <HAL_GetTick>
 80009a2:	1b80      	subs	r0, r0, r6
 80009a4:	2864      	cmp	r0, #100	; 0x64
 80009a6:	d9f7      	bls.n	8000998 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80009a8:	2003      	movs	r0, #3
 80009aa:	e7e7      	b.n	800097c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ac:	b99b      	cbnz	r3, 80009d6 <HAL_RCC_OscConfig+0xb2>
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009be:	f7ff fc07 	bl	80001d0 <HAL_GetTick>
 80009c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	0399      	lsls	r1, r3, #14
 80009c8:	d5b2      	bpl.n	8000930 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ca:	f7ff fc01 	bl	80001d0 <HAL_GetTick>
 80009ce:	1b80      	subs	r0, r0, r6
 80009d0:	2864      	cmp	r0, #100	; 0x64
 80009d2:	d9f7      	bls.n	80009c4 <HAL_RCC_OscConfig+0xa0>
 80009d4:	e7e8      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	d103      	bne.n	80009e6 <HAL_RCC_OscConfig+0xc2>
 80009de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e2:	6023      	str	r3, [r4, #0]
 80009e4:	e7d1      	b.n	800098a <HAL_RCC_OscConfig+0x66>
 80009e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ea:	6023      	str	r3, [r4, #0]
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f2:	e7cd      	b.n	8000990 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <HAL_RCC_OscConfig+0x270>)
 80009f6:	6863      	ldr	r3, [r4, #4]
 80009f8:	f013 0f0c 	tst.w	r3, #12
 80009fc:	d007      	beq.n	8000a0e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009fe:	6863      	ldr	r3, [r4, #4]
 8000a00:	f003 030c 	and.w	r3, r3, #12
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d110      	bne.n	8000a2a <HAL_RCC_OscConfig+0x106>
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	03da      	lsls	r2, r3, #15
 8000a0c:	d40d      	bmi.n	8000a2a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	079b      	lsls	r3, r3, #30
 8000a12:	d502      	bpl.n	8000a1a <HAL_RCC_OscConfig+0xf6>
 8000a14:	692b      	ldr	r3, [r5, #16]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d1af      	bne.n	800097a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	696a      	ldr	r2, [r5, #20]
 8000a1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a26:	6023      	str	r3, [r4, #0]
 8000a28:	e785      	b.n	8000936 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a2a:	692a      	ldr	r2, [r5, #16]
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <HAL_RCC_OscConfig+0x274>)
 8000a2e:	b16a      	cbz	r2, 8000a4c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a34:	f7ff fbcc 	bl	80001d0 <HAL_GetTick>
 8000a38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	079f      	lsls	r7, r3, #30
 8000a3e:	d4ec      	bmi.n	8000a1a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a40:	f7ff fbc6 	bl	80001d0 <HAL_GetTick>
 8000a44:	1b80      	subs	r0, r0, r6
 8000a46:	2802      	cmp	r0, #2
 8000a48:	d9f7      	bls.n	8000a3a <HAL_RCC_OscConfig+0x116>
 8000a4a:	e7ad      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a4e:	f7ff fbbf 	bl	80001d0 <HAL_GetTick>
 8000a52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	0798      	lsls	r0, r3, #30
 8000a58:	f57f af6d 	bpl.w	8000936 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5c:	f7ff fbb8 	bl	80001d0 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	2802      	cmp	r0, #2
 8000a64:	d9f6      	bls.n	8000a54 <HAL_RCC_OscConfig+0x130>
 8000a66:	e79f      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a68:	69aa      	ldr	r2, [r5, #24]
 8000a6a:	4c4a      	ldr	r4, [pc, #296]	; (8000b94 <HAL_RCC_OscConfig+0x270>)
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <HAL_RCC_OscConfig+0x278>)
 8000a6e:	b1da      	cbz	r2, 8000aa8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a74:	f7ff fbac 	bl	80001d0 <HAL_GetTick>
 8000a78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7c:	079b      	lsls	r3, r3, #30
 8000a7e:	d50d      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a80:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <HAL_RCC_OscConfig+0x27c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a8c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a8e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a90:	9b01      	ldr	r3, [sp, #4]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	9201      	str	r2, [sp, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <HAL_RCC_OscConfig+0x16a>
 8000a9a:	e750      	b.n	800093e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fb98 	bl	80001d0 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9e9      	bls.n	8000a7a <HAL_RCC_OscConfig+0x156>
 8000aa6:	e77f      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000aa8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aaa:	f7ff fb91 	bl	80001d0 <HAL_GetTick>
 8000aae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ab2:	079f      	lsls	r7, r3, #30
 8000ab4:	f57f af43 	bpl.w	800093e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab8:	f7ff fb8a 	bl	80001d0 <HAL_GetTick>
 8000abc:	1b80      	subs	r0, r0, r6
 8000abe:	2802      	cmp	r0, #2
 8000ac0:	d9f6      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x18c>
 8000ac2:	e771      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac4:	4c33      	ldr	r4, [pc, #204]	; (8000b94 <HAL_RCC_OscConfig+0x270>)
 8000ac6:	69e3      	ldr	r3, [r4, #28]
 8000ac8:	00d8      	lsls	r0, r3, #3
 8000aca:	d424      	bmi.n	8000b16 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000acc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	69e3      	ldr	r3, [r4, #28]
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61e3      	str	r3, [r4, #28]
 8000ad6:	69e3      	ldr	r3, [r4, #28]
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae0:	4e30      	ldr	r6, [pc, #192]	; (8000ba4 <HAL_RCC_OscConfig+0x280>)
 8000ae2:	6833      	ldr	r3, [r6, #0]
 8000ae4:	05d9      	lsls	r1, r3, #23
 8000ae6:	d518      	bpl.n	8000b1a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae8:	68eb      	ldr	r3, [r5, #12]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d126      	bne.n	8000b3c <HAL_RCC_OscConfig+0x218>
 8000aee:	6a23      	ldr	r3, [r4, #32]
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000af6:	f7ff fb6b 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afa:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000afe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b00:	6a23      	ldr	r3, [r4, #32]
 8000b02:	079b      	lsls	r3, r3, #30
 8000b04:	d53f      	bpl.n	8000b86 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	f43f af1d 	beq.w	8000946 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b0c:	69e3      	ldr	r3, [r4, #28]
 8000b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b12:	61e3      	str	r3, [r4, #28]
 8000b14:	e717      	b.n	8000946 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b16:	2700      	movs	r7, #0
 8000b18:	e7e2      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b1a:	6833      	ldr	r3, [r6, #0]
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b22:	f7ff fb55 	bl	80001d0 <HAL_GetTick>
 8000b26:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b28:	6833      	ldr	r3, [r6, #0]
 8000b2a:	05da      	lsls	r2, r3, #23
 8000b2c:	d4dc      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b2e:	f7ff fb4f 	bl	80001d0 <HAL_GetTick>
 8000b32:	eba0 0008 	sub.w	r0, r0, r8
 8000b36:	2864      	cmp	r0, #100	; 0x64
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x204>
 8000b3a:	e735      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	b9ab      	cbnz	r3, 8000b6a <HAL_RCC_OscConfig+0x246>
 8000b3e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b40:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6223      	str	r3, [r4, #32]
 8000b4a:	6a23      	ldr	r3, [r4, #32]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b52:	f7ff fb3d 	bl	80001d0 <HAL_GetTick>
 8000b56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	0798      	lsls	r0, r3, #30
 8000b5c:	d5d3      	bpl.n	8000b06 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fb37 	bl	80001d0 <HAL_GetTick>
 8000b62:	1b80      	subs	r0, r0, r6
 8000b64:	4540      	cmp	r0, r8
 8000b66:	d9f7      	bls.n	8000b58 <HAL_RCC_OscConfig+0x234>
 8000b68:	e71e      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	6a23      	ldr	r3, [r4, #32]
 8000b6e:	d103      	bne.n	8000b78 <HAL_RCC_OscConfig+0x254>
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6223      	str	r3, [r4, #32]
 8000b76:	e7ba      	b.n	8000aee <HAL_RCC_OscConfig+0x1ca>
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	6223      	str	r3, [r4, #32]
 8000b7e:	6a23      	ldr	r3, [r4, #32]
 8000b80:	f023 0304 	bic.w	r3, r3, #4
 8000b84:	e7b6      	b.n	8000af4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b86:	f7ff fb23 	bl	80001d0 <HAL_GetTick>
 8000b8a:	eba0 0008 	sub.w	r0, r0, r8
 8000b8e:	42b0      	cmp	r0, r6
 8000b90:	d9b6      	bls.n	8000b00 <HAL_RCC_OscConfig+0x1dc>
 8000b92:	e709      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
 8000b94:	40021000 	.word	0x40021000
 8000b98:	42420000 	.word	0x42420000
 8000b9c:	42420480 	.word	0x42420480
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba8:	4c22      	ldr	r4, [pc, #136]	; (8000c34 <HAL_RCC_OscConfig+0x310>)
 8000baa:	6863      	ldr	r3, [r4, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	f43f aee2 	beq.w	800097a <HAL_RCC_OscConfig+0x56>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	4e1f      	ldr	r6, [pc, #124]	; (8000c38 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000bbc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bbe:	d12b      	bne.n	8000c18 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fb06 	bl	80001d0 <HAL_GetTick>
 8000bc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	0199      	lsls	r1, r3, #6
 8000bca:	d41f      	bmi.n	8000c0c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bcc:	6a2b      	ldr	r3, [r5, #32]
 8000bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd2:	d105      	bne.n	8000be0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bd4:	6862      	ldr	r2, [r4, #4]
 8000bd6:	68a9      	ldr	r1, [r5, #8]
 8000bd8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000be2:	6862      	ldr	r2, [r4, #4]
 8000be4:	430b      	orrs	r3, r1
 8000be6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bea:	4313      	orrs	r3, r2
 8000bec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bee:	2301      	movs	r3, #1
 8000bf0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bf2:	f7ff faed 	bl	80001d0 <HAL_GetTick>
 8000bf6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	019a      	lsls	r2, r3, #6
 8000bfc:	f53f aea7 	bmi.w	800094e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c00:	f7ff fae6 	bl	80001d0 <HAL_GetTick>
 8000c04:	1b40      	subs	r0, r0, r5
 8000c06:	2802      	cmp	r0, #2
 8000c08:	d9f6      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x2d4>
 8000c0a:	e6cd      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c0c:	f7ff fae0 	bl	80001d0 <HAL_GetTick>
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	2802      	cmp	r0, #2
 8000c14:	d9d7      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2a2>
 8000c16:	e6c7      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c18:	f7ff fada 	bl	80001d0 <HAL_GetTick>
 8000c1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	f57f ae94 	bpl.w	800094e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fad3 	bl	80001d0 <HAL_GetTick>
 8000c2a:	1b40      	subs	r0, r0, r5
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2fa>
 8000c30:	e6ba      	b.n	80009a8 <HAL_RCC_OscConfig+0x84>
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	42420060 	.word	0x42420060

08000c3c <HAL_RCC_GetSysClockFreq>:
{
 8000c3c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c40:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c42:	ac02      	add	r4, sp, #8
 8000c44:	f103 0510 	add.w	r5, r3, #16
 8000c48:	4622      	mov	r2, r4
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	6859      	ldr	r1, [r3, #4]
 8000c4e:	3308      	adds	r3, #8
 8000c50:	c203      	stmia	r2!, {r0, r1}
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	4614      	mov	r4, r2
 8000c56:	d1f7      	bne.n	8000c48 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c5e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c60:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c62:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c66:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c68:	f003 020c 	and.w	r2, r3, #12
 8000c6c:	2a08      	cmp	r2, #8
 8000c6e:	d117      	bne.n	8000ca0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c70:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c74:	a806      	add	r0, sp, #24
 8000c76:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c78:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c7a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c7e:	d50c      	bpl.n	8000c9a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c80:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c84:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c88:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c8a:	aa06      	add	r2, sp, #24
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c92:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c96:	b007      	add	sp, #28
 8000c98:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c9c:	4350      	muls	r0, r2
 8000c9e:	e7fa      	b.n	8000c96 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ca2:	e7f8      	b.n	8000c96 <HAL_RCC_GetSysClockFreq+0x5a>
 8000ca4:	0800172c 	.word	0x0800172c
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	003d0900 	.word	0x003d0900

08000cb4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cb4:	4a54      	ldr	r2, [pc, #336]	; (8000e08 <HAL_RCC_ClockConfig+0x154>)
{
 8000cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cba:	6813      	ldr	r3, [r2, #0]
{
 8000cbc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	428b      	cmp	r3, r1
{
 8000cc4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cc6:	d32a      	bcc.n	8000d1e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc8:	6829      	ldr	r1, [r5, #0]
 8000cca:	078c      	lsls	r4, r1, #30
 8000ccc:	d434      	bmi.n	8000d38 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cce:	07ca      	lsls	r2, r1, #31
 8000cd0:	d447      	bmi.n	8000d62 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd2:	4a4d      	ldr	r2, [pc, #308]	; (8000e08 <HAL_RCC_ClockConfig+0x154>)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f0c0 8082 	bcc.w	8000de4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce0:	682a      	ldr	r2, [r5, #0]
 8000ce2:	4c4a      	ldr	r4, [pc, #296]	; (8000e0c <HAL_RCC_ClockConfig+0x158>)
 8000ce4:	f012 0f04 	tst.w	r2, #4
 8000ce8:	f040 8087 	bne.w	8000dfa <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	0713      	lsls	r3, r2, #28
 8000cee:	d506      	bpl.n	8000cfe <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cf0:	6863      	ldr	r3, [r4, #4]
 8000cf2:	692a      	ldr	r2, [r5, #16]
 8000cf4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cfc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cfe:	f7ff ff9d 	bl	8000c3c <HAL_RCC_GetSysClockFreq>
 8000d02:	6863      	ldr	r3, [r4, #4]
 8000d04:	4a42      	ldr	r2, [pc, #264]	; (8000e10 <HAL_RCC_ClockConfig+0x15c>)
 8000d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	40d8      	lsrs	r0, r3
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <HAL_RCC_ClockConfig+0x160>)
 8000d10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fa1a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000d18:	2000      	movs	r0, #0
}
 8000d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1e:	6813      	ldr	r3, [r2, #0]
 8000d20:	f023 0307 	bic.w	r3, r3, #7
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d0ca      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
 8000d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d38:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3e:	bf1e      	ittt	ne
 8000d40:	685a      	ldrne	r2, [r3, #4]
 8000d42:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d46:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d48:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d4a:	bf42      	ittt	mi
 8000d4c:	685a      	ldrmi	r2, [r3, #4]
 8000d4e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000d52:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	68a8      	ldr	r0, [r5, #8]
 8000d58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d5c:	4302      	orrs	r2, r0
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	e7b5      	b.n	8000cce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d62:	686a      	ldr	r2, [r5, #4]
 8000d64:	4c29      	ldr	r4, [pc, #164]	; (8000e0c <HAL_RCC_ClockConfig+0x158>)
 8000d66:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6a:	d11c      	bne.n	8000da6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	d0df      	beq.n	8000d32 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d72:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d74:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d80:	f7ff fa26 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d84:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d86:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d09d      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d96:	f7ff fa1b 	bl	80001d0 <HAL_GetTick>
 8000d9a:	1bc0      	subs	r0, r0, r7
 8000d9c:	4540      	cmp	r0, r8
 8000d9e:	d9f5      	bls.n	8000d8c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000da6:	2a02      	cmp	r2, #2
 8000da8:	d102      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dae:	e7df      	b.n	8000d70 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	f013 0f02 	tst.w	r3, #2
 8000db4:	e7dc      	b.n	8000d70 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d10f      	bne.n	8000dda <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dba:	6863      	ldr	r3, [r4, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d086      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc4:	f7ff fa04 	bl	80001d0 <HAL_GetTick>
 8000dc8:	1bc0      	subs	r0, r0, r7
 8000dca:	4540      	cmp	r0, r8
 8000dcc:	d9f5      	bls.n	8000dba <HAL_RCC_ClockConfig+0x106>
 8000dce:	e7e7      	b.n	8000da0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd0:	f7ff f9fe 	bl	80001d0 <HAL_GetTick>
 8000dd4:	1bc0      	subs	r0, r0, r7
 8000dd6:	4540      	cmp	r0, r8
 8000dd8:	d8e2      	bhi.n	8000da0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	f013 0f0c 	tst.w	r3, #12
 8000de0:	d1f6      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0x11c>
 8000de2:	e776      	b.n	8000cd2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	4333      	orrs	r3, r6
 8000dec:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d19c      	bne.n	8000d32 <HAL_RCC_ClockConfig+0x7e>
 8000df8:	e772      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dfa:	6863      	ldr	r3, [r4, #4]
 8000dfc:	68e9      	ldr	r1, [r5, #12]
 8000dfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6063      	str	r3, [r4, #4]
 8000e06:	e771      	b.n	8000cec <HAL_RCC_ClockConfig+0x38>
 8000e08:	40022000 	.word	0x40022000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	0800174c 	.word	0x0800174c
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e26:	6810      	ldr	r0, [r2, #0]
} 
 8000e28:	40d8      	lsrs	r0, r3
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	0800175c 	.word	0x0800175c
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e38:	6803      	ldr	r3, [r0, #0]
{
 8000e3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e3e:	07d9      	lsls	r1, r3, #31
{
 8000e40:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e42:	d520      	bpl.n	8000e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e44:	4c35      	ldr	r4, [pc, #212]	; (8000f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e46:	69e3      	ldr	r3, [r4, #28]
 8000e48:	00da      	lsls	r2, r3, #3
 8000e4a:	d432      	bmi.n	8000eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000e4c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	69e3      	ldr	r3, [r4, #28]
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61e3      	str	r3, [r4, #28]
 8000e56:	69e3      	ldr	r3, [r4, #28]
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	4e2f      	ldr	r6, [pc, #188]	; (8000f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000e62:	6833      	ldr	r3, [r6, #0]
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	d526      	bpl.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e68:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e6a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e6e:	d136      	bne.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e70:	6a23      	ldr	r3, [r4, #32]
 8000e72:	686a      	ldr	r2, [r5, #4]
 8000e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e7c:	b11f      	cbz	r7, 8000e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	69e3      	ldr	r3, [r4, #28]
 8000e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000e86:	6828      	ldr	r0, [r5, #0]
 8000e88:	0783      	lsls	r3, r0, #30
 8000e8a:	d506      	bpl.n	8000e9a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000e8c:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e8e:	68a9      	ldr	r1, [r5, #8]
 8000e90:	6853      	ldr	r3, [r2, #4]
 8000e92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000e9a:	f010 0010 	ands.w	r0, r0, #16
 8000e9e:	d01b      	beq.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000ea2:	68e9      	ldr	r1, [r5, #12]
 8000ea4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000ea6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ea8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6053      	str	r3, [r2, #4]
 8000eb0:	e012      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000eb2:	2700      	movs	r7, #0
 8000eb4:	e7d4      	b.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb6:	6833      	ldr	r3, [r6, #0]
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ebe:	f7ff f987 	bl	80001d0 <HAL_GetTick>
 8000ec2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	05d8      	lsls	r0, r3, #23
 8000ec8:	d4ce      	bmi.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f7ff f981 	bl	80001d0 <HAL_GetTick>
 8000ece:	eba0 0008 	sub.w	r0, r0, r8
 8000ed2:	2864      	cmp	r0, #100	; 0x64
 8000ed4:	d9f6      	bls.n	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000ed6:	2003      	movs	r0, #3
}
 8000ed8:	b002      	add	sp, #8
 8000eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ede:	686a      	ldr	r2, [r5, #4]
 8000ee0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d0c3      	beq.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000eec:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000eee:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ef0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ef6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000ef8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000efa:	07d9      	lsls	r1, r3, #31
 8000efc:	d5b8      	bpl.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000efe:	f7ff f967 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	6a23      	ldr	r3, [r4, #32]
 8000f0a:	079a      	lsls	r2, r3, #30
 8000f0c:	d4b0      	bmi.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff f95f 	bl	80001d0 <HAL_GetTick>
 8000f12:	1b80      	subs	r0, r0, r6
 8000f14:	4540      	cmp	r0, r8
 8000f16:	d9f7      	bls.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000f18:	e7dd      	b.n	8000ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40007000 	.word	0x40007000
 8000f24:	42420440 	.word	0x42420440

08000f28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000f2e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f30:	ad02      	add	r5, sp, #8
 8000f32:	f103 0610 	add.w	r6, r3, #16
 8000f36:	462a      	mov	r2, r5
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	6859      	ldr	r1, [r3, #4]
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	c203      	stmia	r2!, {r0, r1}
 8000f40:	42b3      	cmp	r3, r6
 8000f42:	4615      	mov	r5, r2
 8000f44:	d1f7      	bne.n	8000f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f46:	2301      	movs	r3, #1
 8000f48:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f4c:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000f4e:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f50:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000f54:	d047      	beq.n	8000fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000f56:	2c10      	cmp	r4, #16
 8000f58:	d017      	beq.n	8000f8a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000f5a:	2c01      	cmp	r4, #1
 8000f5c:	d14f      	bne.n	8000ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000f5e:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000f64:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000f66:	4019      	ands	r1, r3
 8000f68:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000f6c:	d044      	beq.n	8000ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f76:	d12d      	bne.n	8000fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000f78:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000f7c:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000f7e:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000f82:	bf08      	it	eq
 8000f84:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000f86:	b006      	add	sp, #24
 8000f88:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000f8c:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000f94:	d0f7      	beq.n	8000f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f96:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000f9a:	a806      	add	r0, sp, #24
 8000f9c:	4402      	add	r2, r0
 8000f9e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fa2:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fa4:	bf41      	itttt	mi
 8000fa6:	685a      	ldrmi	r2, [r3, #4]
 8000fa8:	a906      	addmi	r1, sp, #24
 8000faa:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000fae:	1852      	addmi	r2, r2, r1
 8000fb0:	bf44      	itt	mi
 8000fb2:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000fb6:	4a15      	ldrmi	r2, [pc, #84]	; (800100c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000fb8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000fba:	bf4c      	ite	mi
 8000fbc:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fc0:	4a13      	ldrpl	r2, [pc, #76]	; (8001010 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000fc2:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fc4:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000fc8:	d4dd      	bmi.n	8000f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000fce:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000fd2:	e7d8      	b.n	8000f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fd8:	d111      	bne.n	8000ffe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000fda:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000fdc:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000fe0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fe4:	e7cd      	b.n	8000f82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000fe6:	f7ff ff17 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	e7ea      	b.n	8000fce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000ff8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ffc:	e7c3      	b.n	8000f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000ffe:	2000      	movs	r0, #0
 8001000:	e7c1      	b.n	8000f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001002:	bf00      	nop
 8001004:	0800173c 	.word	0x0800173c
 8001008:	40021000 	.word	0x40021000
 800100c:	007a1200 	.word	0x007a1200
 8001010:	003d0900 	.word	0x003d0900

08001014 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001018:	4604      	mov	r4, r0
 800101a:	4688      	mov	r8, r1
 800101c:	4617      	mov	r7, r2
 800101e:	461d      	mov	r5, r3
 8001020:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001022:	6822      	ldr	r2, [r4, #0]
 8001024:	6893      	ldr	r3, [r2, #8]
 8001026:	ea38 0303 	bics.w	r3, r8, r3
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	429f      	cmp	r7, r3
 8001032:	d102      	bne.n	800103a <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001034:	2000      	movs	r0, #0
}
 8001036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800103a:	1c6b      	adds	r3, r5, #1
 800103c:	d0f2      	beq.n	8001024 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800103e:	bb55      	cbnz	r5, 8001096 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001048:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800104a:	6862      	ldr	r2, [r4, #4]
 800104c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001050:	d10a      	bne.n	8001068 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001052:	68a2      	ldr	r2, [r4, #8]
 8001054:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001058:	d002      	beq.n	8001060 <SPI_WaitFlagStateUntilTimeout+0x4c>
 800105a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800105e:	d103      	bne.n	8001068 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001066:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001068:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800106a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800106e:	d109      	bne.n	8001084 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001076:	0412      	lsls	r2, r2, #16
 8001078:	0c12      	lsrs	r2, r2, #16
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001082:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001084:	2301      	movs	r3, #1
 8001086:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800108a:	2300      	movs	r3, #0
 800108c:	2003      	movs	r0, #3
 800108e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001096:	f7ff f89b 	bl	80001d0 <HAL_GetTick>
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	4285      	cmp	r5, r0
 800109e:	d8c0      	bhi.n	8001022 <SPI_WaitFlagStateUntilTimeout+0xe>
 80010a0:	e7ce      	b.n	8001040 <SPI_WaitFlagStateUntilTimeout+0x2c>

080010a2 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80010a2:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80010a4:	460b      	mov	r3, r1
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	2200      	movs	r2, #0
{
 80010ac:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80010ae:	f7ff ffb1 	bl	8001014 <SPI_WaitFlagStateUntilTimeout>
 80010b2:	b120      	cbz	r0, 80010be <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80010b4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80010b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80010be:	b002      	add	sp, #8
 80010c0:	bd10      	pop	{r4, pc}

080010c2 <HAL_SPI_Transmit>:
{
 80010c2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80010c6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80010c8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80010cc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80010ce:	2b01      	cmp	r3, #1
{
 80010d0:	460d      	mov	r5, r1
 80010d2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80010d4:	f000 809c 	beq.w	8001210 <HAL_SPI_Transmit+0x14e>
 80010d8:	2301      	movs	r3, #1
 80010da:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80010de:	f7ff f877 	bl	80001d0 <HAL_GetTick>
 80010e2:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80010e4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80010e8:	b2c0      	uxtb	r0, r0
 80010ea:	2801      	cmp	r0, #1
 80010ec:	f040 808e 	bne.w	800120c <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 80010f0:	2d00      	cmp	r5, #0
 80010f2:	d04e      	beq.n	8001192 <HAL_SPI_Transmit+0xd0>
 80010f4:	f1b8 0f00 	cmp.w	r8, #0
 80010f8:	d04b      	beq.n	8001192 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001100:	2300      	movs	r3, #0
 8001102:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001104:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001106:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800110a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800110c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800110e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001110:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001112:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001114:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800111a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800111c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001120:	bf02      	ittt	eq
 8001122:	681a      	ldreq	r2, [r3, #0]
 8001124:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001128:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800112e:	bf5e      	ittt	pl
 8001130:	681a      	ldrpl	r2, [r3, #0]
 8001132:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001136:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001138:	68e2      	ldr	r2, [r4, #12]
 800113a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800113e:	6862      	ldr	r2, [r4, #4]
 8001140:	d138      	bne.n	80011b4 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001142:	b11a      	cbz	r2, 800114c <HAL_SPI_Transmit+0x8a>
 8001144:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001146:	b292      	uxth	r2, r2
 8001148:	2a01      	cmp	r2, #1
 800114a:	d106      	bne.n	800115a <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 800114c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001150:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001154:	3b01      	subs	r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800115a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800115c:	b29b      	uxth	r3, r3
 800115e:	b993      	cbnz	r3, 8001186 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001160:	9700      	str	r7, [sp, #0]
 8001162:	4633      	mov	r3, r6
 8001164:	2201      	movs	r2, #1
 8001166:	2102      	movs	r1, #2
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff ff53 	bl	8001014 <SPI_WaitFlagStateUntilTimeout>
 800116e:	b978      	cbnz	r0, 8001190 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001170:	463a      	mov	r2, r7
 8001172:	4631      	mov	r1, r6
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff ff94 	bl	80010a2 <SPI_CheckFlag_BSY>
 800117a:	2800      	cmp	r0, #0
 800117c:	d038      	beq.n	80011f0 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800117e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001180:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001182:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001184:	e005      	b.n	8001192 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	0790      	lsls	r0, r2, #30
 800118c:	d4de      	bmi.n	800114c <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800118e:	b94e      	cbnz	r6, 80011a4 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001192:	2301      	movs	r3, #1
 8001194:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001198:	2300      	movs	r3, #0
 800119a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800119e:	b004      	add	sp, #16
 80011a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80011a4:	1c71      	adds	r1, r6, #1
 80011a6:	d0d8      	beq.n	800115a <HAL_SPI_Transmit+0x98>
 80011a8:	f7ff f812 	bl	80001d0 <HAL_GetTick>
 80011ac:	1bc0      	subs	r0, r0, r7
 80011ae:	4286      	cmp	r6, r0
 80011b0:	d8d3      	bhi.n	800115a <HAL_SPI_Transmit+0x98>
 80011b2:	e7ed      	b.n	8001190 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80011b4:	b11a      	cbz	r2, 80011be <HAL_SPI_Transmit+0xfc>
 80011b6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80011b8:	b292      	uxth	r2, r2
 80011ba:	2a01      	cmp	r2, #1
 80011bc:	d106      	bne.n	80011cc <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80011be:	f815 2b01 	ldrb.w	r2, [r5], #1
 80011c2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80011c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80011cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0c5      	beq.n	8001160 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	0792      	lsls	r2, r2, #30
 80011da:	d4f0      	bmi.n	80011be <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d0d7      	beq.n	8001190 <HAL_SPI_Transmit+0xce>
 80011e0:	1c73      	adds	r3, r6, #1
 80011e2:	d0f3      	beq.n	80011cc <HAL_SPI_Transmit+0x10a>
 80011e4:	f7fe fff4 	bl	80001d0 <HAL_GetTick>
 80011e8:	1bc0      	subs	r0, r0, r7
 80011ea:	4286      	cmp	r6, r0
 80011ec:	d8ee      	bhi.n	80011cc <HAL_SPI_Transmit+0x10a>
 80011ee:	e7cf      	b.n	8001190 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011f0:	68a3      	ldr	r3, [r4, #8]
 80011f2:	b933      	cbnz	r3, 8001202 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011f4:	9303      	str	r3, [sp, #12]
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	9203      	str	r2, [sp, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001202:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001204:	3000      	adds	r0, #0
 8001206:	bf18      	it	ne
 8001208:	2001      	movne	r0, #1
 800120a:	e7c2      	b.n	8001192 <HAL_SPI_Transmit+0xd0>
 800120c:	2002      	movs	r0, #2
 800120e:	e7c0      	b.n	8001192 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001210:	2002      	movs	r0, #2
 8001212:	e7c4      	b.n	800119e <HAL_SPI_Transmit+0xdc>

08001214 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001214:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001216:	4604      	mov	r4, r0
 8001218:	2800      	cmp	r0, #0
 800121a:	d034      	beq.n	8001286 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001220:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001224:	b90b      	cbnz	r3, 800122a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001226:	f000 f9c3 	bl	80015b0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800122a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800122c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800122e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001232:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001234:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800123a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800123c:	6863      	ldr	r3, [r4, #4]
 800123e:	69a2      	ldr	r2, [r4, #24]
 8001240:	4303      	orrs	r3, r0
 8001242:	68e0      	ldr	r0, [r4, #12]
 8001244:	4303      	orrs	r3, r0
 8001246:	6920      	ldr	r0, [r4, #16]
 8001248:	4303      	orrs	r3, r0
 800124a:	6960      	ldr	r0, [r4, #20]
 800124c:	4303      	orrs	r3, r0
 800124e:	69e0      	ldr	r0, [r4, #28]
 8001250:	4303      	orrs	r3, r0
 8001252:	6a20      	ldr	r0, [r4, #32]
 8001254:	4303      	orrs	r3, r0
 8001256:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001258:	4303      	orrs	r3, r0
 800125a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800125e:	4303      	orrs	r3, r0
 8001260:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001262:	0c12      	lsrs	r2, r2, #16
 8001264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001266:	f002 0204 	and.w	r2, r2, #4
 800126a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800126c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800126e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001270:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001272:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001274:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800127a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800127c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800127e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001280:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001284:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
}
 8001288:	bd10      	pop	{r4, pc}

0800128a <num2bin_ws2812>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void num2bin_ws2812(uint8_t num, uint8_t out[], uint8_t offset)
{
 800128a:	b510      	push	{r4, lr}
 800128c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	uint8_t one = 0b11111000;
	uint8_t zero = 0b11000000;
	int i;

	for(i=7; i>=0; i--)
 8001290:	2307      	movs	r3, #7
		if((num & 0x01) == 1)
		{
			out[offset*8 + i] = one;
		} else
		{
			out[offset*8 + i] = zero;
 8001292:	21c0      	movs	r1, #192	; 0xc0
			out[offset*8 + i] = one;
 8001294:	24f8      	movs	r4, #248	; 0xf8
		if((num & 0x01) == 1)
 8001296:	f010 0f01 	tst.w	r0, #1
			out[offset*8 + i] = one;
 800129a:	bf14      	ite	ne
 800129c:	54d4      	strbne	r4, [r2, r3]
			out[offset*8 + i] = zero;
 800129e:	54d1      	strbeq	r1, [r2, r3]
	for(i=7; i>=0; i--)
 80012a0:	f113 33ff 	adds.w	r3, r3, #4294967295
		}
		num = num >> 1;
 80012a4:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for(i=7; i>=0; i--)
 80012a8:	d2f5      	bcs.n	8001296 <num2bin_ws2812+0xc>
	}
}
 80012aa:	bd10      	pop	{r4, pc}

080012ac <set_color_ws2812>:

void set_color_ws2812(uint8_t red, uint8_t green, uint8_t blue, uint8_t out[], uint8_t index)
{
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	461d      	mov	r5, r3
 80012b0:	4607      	mov	r7, r0
 80012b2:	4616      	mov	r6, r2
 80012b4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80012b8:	4608      	mov	r0, r1
	num2bin_ws2812(green, out, index*3 + 0);
 80012ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80012be:	b2e4      	uxtb	r4, r4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4622      	mov	r2, r4
 80012c4:	f7ff ffe1 	bl	800128a <num2bin_ws2812>
	num2bin_ws2812(red, out, index*3 + 1);
 80012c8:	1c62      	adds	r2, r4, #1
 80012ca:	4629      	mov	r1, r5
 80012cc:	4638      	mov	r0, r7
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	f7ff ffdb 	bl	800128a <num2bin_ws2812>
	num2bin_ws2812(blue, out, index*3 + 2);
 80012d4:	1ca2      	adds	r2, r4, #2
 80012d6:	4629      	mov	r1, r5
 80012d8:	4630      	mov	r0, r6
}
 80012da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	num2bin_ws2812(blue, out, index*3 + 2);
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f7ff bfd3 	b.w	800128a <num2bin_ws2812>

080012e4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e4:	2228      	movs	r2, #40	; 0x28
{
 80012e6:	b530      	push	{r4, r5, lr}
 80012e8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	eb0d 0002 	add.w	r0, sp, r2
 80012ee:	2100      	movs	r1, #0
 80012f0:	f000 fa08 	bl	8001704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f6:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	eb0d 0002 	add.w	r0, sp, r2
 80012fc:	2100      	movs	r1, #0
 80012fe:	f000 fa01 	bl	8001704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001302:	462a      	mov	r2, r5
 8001304:	2100      	movs	r1, #0
 8001306:	a801      	add	r0, sp, #4
 8001308:	f000 f9fc 	bl	8001704 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8001312:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8001318:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f7ff fb00 	bl	8000924 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001326:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	4621      	mov	r1, r4
 8001330:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	f7ff fcbb 	bl	8000cb4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800133e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001344:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001346:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f7ff fd76 	bl	8000e38 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800134c:	b015      	add	sp, #84	; 0x54
 800134e:	bd30      	pop	{r4, r5, pc}

08001350 <main>:
{
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	2610      	movs	r6, #16
{
 8001356:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
	uint8_t reset[100] = {0};
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	2100      	movs	r1, #0
 800135e:	a805      	add	r0, sp, #20
 8001360:	f000 f9d0 	bl	8001704 <memset>
  HAL_Init();
 8001364:	f7fe ff16 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001368:	f7ff ffbc 	bl	80012e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	4632      	mov	r2, r6
 800136e:	2100      	movs	r1, #0
 8001370:	a81e      	add	r0, sp, #120	; 0x78
 8001372:	f000 f9c7 	bl	8001704 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <main+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800137e:	485e      	ldr	r0, [pc, #376]	; (80014f8 <main+0x1a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	4332      	orrs	r2, r6
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4032      	ands	r2, r6
 800138a:	9203      	str	r2, [sp, #12]
 800138c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	f042 0204 	orr.w	r2, r2, #4
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	9304      	str	r3, [sp, #16]
 80013a2:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = LED_Pin;
 80013a4:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013a8:	f7ff fab6 	bl	8000918 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ae:	a91e      	add	r1, sp, #120	; 0x78
 80013b0:	4851      	ldr	r0, [pc, #324]	; (80014f8 <main+0x1a8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	971f      	str	r7, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = LED_Pin;
 80013b6:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f7ff f9cc 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUT_Pin */
  GPIO_InitStruct.Pin = DOUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DOUT_GPIO_Port, &GPIO_InitStruct);
 80013c0:	a91e      	add	r1, sp, #120	; 0x78
 80013c2:	484e      	ldr	r0, [pc, #312]	; (80014fc <main+0x1ac>)
  GPIO_InitStruct.Pin = DOUT_Pin;
 80013c4:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	941f      	str	r4, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	9420      	str	r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(DOUT_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f7ff f9c5 	bl	8000758 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80013d2:	4d4b      	ldr	r5, [pc, #300]	; (8001500 <main+0x1b0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <main+0x1b4>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d6:	4628      	mov	r0, r5
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d8:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e0:	61ab      	str	r3, [r5, #24]
  hspi1.Init.CRCPolynomial = 10;
 80013e2:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013e4:	61ee      	str	r6, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 80013e6:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Instance = ADC1;
 80013e8:	4e47      	ldr	r6, [pc, #284]	; (8001508 <main+0x1b8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	60ac      	str	r4, [r5, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ee:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	616c      	str	r4, [r5, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f2:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f4:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f8:	f7ff ff0c 	bl	8001214 <HAL_SPI_Init>
  hadc1.Instance = ADC1;
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <main+0x1bc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013fe:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8001400:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001402:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001406:	60f7      	str	r7, [r6, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001408:	61f3      	str	r3, [r6, #28]
  hadc1.Init.NbrOfConversion = 1;
 800140a:	6137      	str	r7, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 800140c:	941e      	str	r4, [sp, #120]	; 0x78
 800140e:	941f      	str	r4, [sp, #124]	; 0x7c
 8001410:	9420      	str	r4, [sp, #128]	; 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001412:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	6174      	str	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001416:	6074      	str	r4, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	f7ff f8c2 	bl	80005a0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 800141c:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	a91e      	add	r1, sp, #120	; 0x78
 8001420:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_6;
 8001422:	931e      	str	r3, [sp, #120]	; 0x78
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	971f      	str	r7, [sp, #124]	; 0x7c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001426:	9720      	str	r7, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	f7fe ff7a 	bl	8000320 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 800142c:	4630      	mov	r0, r6
 800142e:	f7ff f833 	bl	8000498 <HAL_ADC_Start>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001432:	4622      	mov	r2, r4
 8001434:	4641      	mov	r1, r8
 8001436:	4830      	ldr	r0, [pc, #192]	; (80014f8 <main+0x1a8>)
 8001438:	f7ff fa6e 	bl	8000918 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1, reset, 100, 250);
 800143c:	462f      	mov	r7, r5
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800143e:	2164      	movs	r1, #100	; 0x64
 8001440:	4630      	mov	r0, r6
 8001442:	f7fe fecb 	bl	80001dc <HAL_ADC_PollForConversion>
 8001446:	b9e0      	cbnz	r0, 8001482 <main+0x132>
		  adc_val = HAL_ADC_GetValue(&hadc1);
 8001448:	4630      	mov	r0, r6
 800144a:	f7fe ff65 	bl	8000318 <HAL_ADC_GetValue>
		  if(adc_val < 2000)
 800144e:	b283      	uxth	r3, r0
 8001450:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001454:	d318      	bcc.n	8001488 <main+0x138>
			  leds = floor((adc_val-2000)/36);
 8001456:	2024      	movs	r0, #36	; 0x24
 8001458:	f5a3 65fa 	sub.w	r5, r3, #2000	; 0x7d0
 800145c:	fb95 f5f0 	sdiv	r5, r5, r0
 8001460:	b2ad      	uxth	r5, r5
 8001462:	2d25      	cmp	r5, #37	; 0x25
 8001464:	bf28      	it	cs
 8001466:	2525      	movcs	r5, #37	; 0x25
	  if(leds > leds_old)
 8001468:	42ac      	cmp	r4, r5
 800146a:	d234      	bcs.n	80014d6 <main+0x186>
			  if(i < leds)
 800146c:	42a5      	cmp	r5, r4
 800146e:	b2e3      	uxtb	r3, r4
 8001470:	dd2c      	ble.n	80014cc <main+0x17c>
				  if(i < 20)
 8001472:	2c13      	cmp	r4, #19
 8001474:	dc0a      	bgt.n	800148c <main+0x13c>
					  set_color_ws2812(0,100,0, data_led, i);
 8001476:	2200      	movs	r2, #0
 8001478:	2164      	movs	r1, #100	; 0x64
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	ab1e      	add	r3, sp, #120	; 0x78
				  set_color_ws2812(0,0,0, data_led, i);
 800147e:	4610      	mov	r0, r2
 8001480:	e010      	b.n	80014a4 <main+0x154>
 8001482:	4625      	mov	r5, r4
 8001484:	462c      	mov	r4, r5
 8001486:	e7da      	b.n	800143e <main+0xee>
			  leds = 1;
 8001488:	2501      	movs	r5, #1
 800148a:	e7ed      	b.n	8001468 <main+0x118>
				  else if(i >= 20 && i < 30)
 800148c:	f1a4 0214 	sub.w	r2, r4, #20
 8001490:	2a09      	cmp	r2, #9
					  set_color_ws2812(240,250,0, data_led, i);
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	bf99      	ittee	ls
 8001498:	21fa      	movls	r1, #250	; 0xfa
 800149a:	20f0      	movls	r0, #240	; 0xf0
					  set_color_ws2812(100,0,0, data_led, i);
 800149c:	4611      	movhi	r1, r2
 800149e:	2064      	movhi	r0, #100	; 0x64
					  set_color_ws2812(240,250,0, data_led, i);
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	ab1e      	add	r3, sp, #120	; 0x78
		  for(i=leds_old; i<37; i++)
 80014a4:	3401      	adds	r4, #1
				  set_color_ws2812(0,0,0, data_led, i);
 80014a6:	f7ff ff01 	bl	80012ac <set_color_ws2812>
		  for(i=leds_old; i<37; i++)
 80014aa:	2c24      	cmp	r4, #36	; 0x24
 80014ac:	ddde      	ble.n	800146c <main+0x11c>
		  HAL_SPI_Transmit(&hspi1, reset, 100, 250);
 80014ae:	a905      	add	r1, sp, #20
 80014b0:	23fa      	movs	r3, #250	; 0xfa
 80014b2:	2264      	movs	r2, #100	; 0x64
 80014b4:	4638      	mov	r0, r7
 80014b6:	f7ff fe04 	bl	80010c2 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi1, data_led, 888, 1000);
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	f44f 725e 	mov.w	r2, #888	; 0x378
 80014c2:	a91e      	add	r1, sp, #120	; 0x78
 80014c4:	4638      	mov	r0, r7
 80014c6:	f7ff fdfc 	bl	80010c2 <HAL_SPI_Transmit>
 80014ca:	e7db      	b.n	8001484 <main+0x134>
				  set_color_ws2812(0,0,0, data_led, i);
 80014cc:	2200      	movs	r2, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4611      	mov	r1, r2
 80014d2:	ab1e      	add	r3, sp, #120	; 0x78
 80014d4:	e7d3      	b.n	800147e <main+0x12e>
	  } else if (leds < leds_old)
 80014d6:	d90b      	bls.n	80014f0 <main+0x1a0>
		  for(i=leds_old; i>=leds; i--)
 80014d8:	42ac      	cmp	r4, r5
 80014da:	dbe8      	blt.n	80014ae <main+0x15e>
			  set_color_ws2812(0,0,0, data_led, i);
 80014dc:	2200      	movs	r2, #0
 80014de:	b2e3      	uxtb	r3, r4
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4611      	mov	r1, r2
 80014e4:	ab1e      	add	r3, sp, #120	; 0x78
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fee0 	bl	80012ac <set_color_ws2812>
		  for(i=leds_old; i>=leds; i--)
 80014ec:	3c01      	subs	r4, #1
 80014ee:	e7f3      	b.n	80014d8 <main+0x188>
	  if(leds != leds_old)
 80014f0:	d0c8      	beq.n	8001484 <main+0x134>
 80014f2:	e7dc      	b.n	80014ae <main+0x15e>
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40010800 	.word	0x40010800
 8001500:	2000005c 	.word	0x2000005c
 8001504:	40013000 	.word	0x40013000
 8001508:	2000002c 	.word	0x2000002c
 800150c:	40012400 	.word	0x40012400

08001510 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_MspInit+0x3c>)
{
 8001512:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	f002 0201 	and.w	r2, r2, #1
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800152c:	61da      	str	r2, [r3, #28]
 800152e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800153a:	6853      	ldr	r3, [r2, #4]
 800153c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	b002      	add	sp, #8
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b510      	push	{r4, lr}
 8001556:	4604      	mov	r4, r0
 8001558:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	2210      	movs	r2, #16
 800155c:	2100      	movs	r1, #0
 800155e:	a802      	add	r0, sp, #8
 8001560:	f000 f8d0 	bl	8001704 <memset>
  if(hadc->Instance==ADC1)
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ADC_MspInit+0x54>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d11b      	bne.n	80015a4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001570:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001578:	619a      	str	r2, [r3, #24]
 800157a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	699a      	ldr	r2, [r3, #24]
 8001588:	f042 0204 	orr.w	r2, r2, #4
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2303      	movs	r3, #3
 800159e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f7ff f8da 	bl	8000758 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015a4:	b006      	add	sp, #24
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	40012400 	.word	0x40012400
 80015ac:	40010800 	.word	0x40010800

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b510      	push	{r4, lr}
 80015b2:	4604      	mov	r4, r0
 80015b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	2210      	movs	r2, #16
 80015b8:	2100      	movs	r1, #0
 80015ba:	a802      	add	r0, sp, #8
 80015bc:	f000 f8a2 	bl	8001704 <memset>
  if(hspi->Instance==SPI1)
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_SPI_MspInit+0x58>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11d      	bne.n	8001604 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80015cc:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	f042 0204 	orr.w	r2, r2, #4
 80015e8:	619a      	str	r2, [r3, #24]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f7ff f8aa 	bl	8000758 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001604:	b006      	add	sp, #24
 8001606:	bd10      	pop	{r4, pc}
 8001608:	40013000 	.word	0x40013000
 800160c:	40010800 	.word	0x40010800

08001610 <NMI_Handler>:
 8001610:	4770      	bx	lr

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler>

0800161a <SVC_Handler>:
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f7fe bdca 	b.w	80001b8 <HAL_IncTick>

08001624 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <SystemInit+0x40>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <SystemInit+0x44>)
 8001632:	400a      	ands	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800163c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001640:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001648:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001650:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001652:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001656:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <SystemInit+0x48>)
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	f8ff0000 	.word	0xf8ff0000
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001670:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001672:	e003      	b.n	800167c <LoopCopyDataInit>

08001674 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001676:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001678:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800167a:	3104      	adds	r1, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001680:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001684:	d3f6      	bcc.n	8001674 <CopyDataInit>
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001688:	e002      	b.n	8001690 <LoopFillZerobss>

0800168a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800168c:	f842 3b04 	str.w	r3, [r2], #4

08001690 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001694:	d3f9      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001696:	f7ff ffc5 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f000 f80f 	bl	80016bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fe57 	bl	8001350 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r3, =_sidata
 80016a4:	0800176c 	.word	0x0800176c
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016b4:	200000b4 	.word	0x200000b4

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <__libc_init_array>:
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	2500      	movs	r5, #0
 80016c0:	4e0c      	ldr	r6, [pc, #48]	; (80016f4 <__libc_init_array+0x38>)
 80016c2:	4c0d      	ldr	r4, [pc, #52]	; (80016f8 <__libc_init_array+0x3c>)
 80016c4:	1ba4      	subs	r4, r4, r6
 80016c6:	10a4      	asrs	r4, r4, #2
 80016c8:	42a5      	cmp	r5, r4
 80016ca:	d109      	bne.n	80016e0 <__libc_init_array+0x24>
 80016cc:	f000 f822 	bl	8001714 <_init>
 80016d0:	2500      	movs	r5, #0
 80016d2:	4e0a      	ldr	r6, [pc, #40]	; (80016fc <__libc_init_array+0x40>)
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <__libc_init_array+0x44>)
 80016d6:	1ba4      	subs	r4, r4, r6
 80016d8:	10a4      	asrs	r4, r4, #2
 80016da:	42a5      	cmp	r5, r4
 80016dc:	d105      	bne.n	80016ea <__libc_init_array+0x2e>
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e4:	4798      	blx	r3
 80016e6:	3501      	adds	r5, #1
 80016e8:	e7ee      	b.n	80016c8 <__libc_init_array+0xc>
 80016ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ee:	4798      	blx	r3
 80016f0:	3501      	adds	r5, #1
 80016f2:	e7f2      	b.n	80016da <__libc_init_array+0x1e>
 80016f4:	08001764 	.word	0x08001764
 80016f8:	08001764 	.word	0x08001764
 80016fc:	08001764 	.word	0x08001764
 8001700:	08001768 	.word	0x08001768

08001704 <memset>:
 8001704:	4603      	mov	r3, r0
 8001706:	4402      	add	r2, r0
 8001708:	4293      	cmp	r3, r2
 800170a:	d100      	bne.n	800170e <memset+0xa>
 800170c:	4770      	bx	lr
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f9      	b.n	8001708 <memset+0x4>

08001714 <_init>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr

08001720 <_fini>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr
